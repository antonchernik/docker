#!/usr/bin/env groovy
@Library('shared-library') _
import com.exactways.helper.*;

pipeline {
    agent {
        label 'agent_ubuntu_20_04'
    }
    options {
        ansiColor('xterm')
    }
    stages {
        stage('Prepare') {
            steps {
                script {
                    (new CleanWorkspace(this)).run(pwd())
                    gitUtils.configureIdentity GIT_USER_NAME, GIT_USER_EMAIL
                    gitUtils.checkoutReference 'master', 'git@github.com:antonchernik/docker.git', "${GIT_CREDENTIALS_ID}"
                    dir("library/${IMAGE_NAME}/${IMAGE_VERSION}/${IMAGE_ARCHITECTURE}") {
                        curlUtils.download 'https://partner-images.canonical.com/core/focal/current/ubuntu-focal-core-cloudimg-amd64-root.tar.gz', 'ubuntu-focal-core-cloudimg-amd64-root.tar.gz', "."
                    }
                }
            }
        }
        stage('Build & push') {
            steps {
                script {
                    def component = [:]
                    component["imageName"] = "${DOCKER_NS}/${IMAGE_NAME}"
                    component["artifactVersion"] = "${IMAGE_VERSION}-${IMAGE_ARCHITECTURE}"
                    component["commitDate"] = gitUtils.getCommitTimestamp 'HEAD'
                    component["vcsRef"] = gitUtils.getCommitId 'HEAD', false
                    component["dockerContext"] = "-f ./Dockerfile ."
                    dir("library/${IMAGE_NAME}/${IMAGE_VERSION}/${IMAGE_ARCHITECTURE}") {
                        dockerUtils.buildImage component, true, true, DOCKER_REGISTRY_FQDN, DOCKER_CREDENTIALS_ID
                    }
                }
            }
        }
        stage('Vulnerabilities check') {
            steps {
                script {
                    trivyUtils.checkImage "${DOCKER_NS}/${IMAGE_NAME}:${IMAGE_VERSION}-${IMAGE_ARCHITECTURE}", "library/${IMAGE_NAME}/${IMAGE_VERSION}/${IMAGE_ARCHITECTURE}/trivy.json"
                }
            }
        }
        stage('Generate readme') {
            steps {
                script {
                    GIT_URL_TAG="sed -i 's~<br/>~"+"<br/>" + "* ${IMAGE_VERSION} "+"Dockerfile [(library/${IMAGE_NAME}/${IMAGE_VERSION}/${IMAGE_ARCHITECTURE}/Dockerfile)]("+"https://github.com/antonchernik/docker/blob/${IMAGE_NAME}-${IMAGE_VERSION}-${IMAGE_ARCHITECTURE}/library/${IMAGE_NAME}/${IMAGE_VERSION}/${IMAGE_ARCHITECTURE}/Dockerfile)"+"<br />"+"Trivy security report [(library/${IMAGE_NAME}/${IMAGE_VERSION}/${IMAGE_ARCHITECTURE}/trivy.json)]("+"https://github.com/antonchernik/docker/blob/${IMAGE_NAME}-${IMAGE_VERSION}-${IMAGE_ARCHITECTURE}/library/${IMAGE_NAME}/${IMAGE_VERSION}/${IMAGE_ARCHITECTURE}/trivy.json)"+"<br />"+"~g' library/${IMAGE_NAME}/${IMAGE_VERSION}/${IMAGE_ARCHITECTURE}/README.md"
                    shellUtils.returnStatus GIT_URL_TAG
                }
            }
        }
        stage('Cleanup') {
            steps {
                script {
                    dir("library/${IMAGE_NAME}/${IMAGE_VERSION}/${IMAGE_ARCHITECTURE}") {
                        fsUtils.delete 'ubuntu-focal-core-cloudimg-amd64-root.tar.gz'
                    }
                    gitUtils.removeUntrackedFilesAndDirectories(pwd())
                    dockerUtils.removeImage "${DOCKER_NS}/${IMAGE_NAME}:${IMAGE_VERSION}-${IMAGE_ARCHITECTURE}"
                    dockerUtils.removeImage "${DOCKER_NS}/${IMAGE_NAME}:latest"
                }
            }
        }
        stage('Commit all changes') {
            steps {
                script {
                    def dir = pwd() + "/library/${IMAGE_NAME}/${IMAGE_VERSION}/${IMAGE_ARCHITECTURE}"
                    def files = ["README.md", "trivy.json"]
                    gitUtils.commitChanges dir, "Updates readme for ${IMAGE_NAME} ${IMAGE_VERSION} and architecture ${IMAGE_ARCHITECTURE}", files
                }
            }
        }
        stage('Add tag') {
            steps {
                script {
                    def tag = "${IMAGE_NAME}-${IMAGE_VERSION}-${IMAGE_ARCHITECTURE}"
                    def tagMessage = "Build ${IMAGE_VERSION} for architecture ${IMAGE_ARCHITECTURE}"
                    def gitHelper = new Git(this, GIT_CREDENTIALS_ID);
                    gitHelper.addTag(pwd(), tag, tagMessage)
                    gitHelper.push(pwd(), "HEAD:master")
                }
            }
        }
    }
}